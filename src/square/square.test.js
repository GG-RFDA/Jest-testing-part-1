const square = require("./square");



describe('square', () => {
    // Объявляем пустую переменную
    let mockValue;
    /*
     * Перед запуском каждого теста можно проводить различные операции.
     * Для этого используется функциия beforeEach.
     * В функцию передаём колбэк, в котором происходит какая-то операция.
     */
    beforeEach(() => {
        // Внутри функции присваиваем mockValue рандомное значение.
        mockValue = Math.random();
    })
     // Функция beforeAll будет вызвана всего один раз, перед запуском всех тестов
    beforeAll(() => {
    
    })
    // Здесь рассматриваются разные случаи с числом 2
	test('Корректное значение', () => {
        // В функцию square передаём 2, а затем передаём square в функцию expect, где вызываем метод toBe и сравниваем с ожидаемым значением - 4
		expect(square(2)).toBe(4);
        // Так же, как и в первом случае, передаём 2 и используем для сравнения метод toBeLessThan (меньше указанного значения - 5)
        expect(square(2)).toBeLessThan(5);
        // Передаём 2 и используем для сравнения метод toBeGreaterThan (больше указанного значения - 3)
        expect(square(2)).toBeGreaterThan(3);
        // Передаём 2 и используем для сравнения метод not.toBeUndefined (не может быть неопределённым)
        expect(square(2)).not.toBeUndefined();
        /*
         * Первым аргументом передаём Math, а вторым аргументом - название метода.
         * Здесь замокан метод, вложенный внутри объекта.
         */
        const spyMathPow = jest.spyOn(Math, 'pow');
        // Вызываем функцию square и передаём в неё число 2
        square(2);
        /*
         * Передаём метод в качестве аргумента в expect и ожидаем, что метод будет вызван один раз.
         * Если укажем 2 вместо 1, то тест упадёт.
         */
        expect(spyMathPow).toBeCalledTimes(1);
	})

    test('Корректное значение', () => {
        // Здесь рассматривается случай, где передаётся 1
        const spyMathPow = jest.spyOn(Math, 'pow');
        // Передаём в функцию square 1
        square(1);
        // Здесь ожидаем, что метод не будет вызван ни разу
        expect(spyMathPow).toBeCalledTimes(0);
        // Чтобы понять, зачем данный пример был рассмотрен, следует внимательно посмотреть файл 'square.js'
	})
     // Есть функции, похожие на beforeEach/beforeAll, но запускаться они будут уже после тестов.
    afterEach(()=> {
        // Поскольку моки необходимо очищать, т.к. они накапливают вызовы, то вызываем у глобального объекта jest метод clearAllMocks
        jest.clearAllMocks()
    })
    // В функции afterAll, например, можно проводить очищающие действия 
    afterAll(()=> {
    })
});
